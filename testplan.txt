These are the test cases in my main.c


int test1() {
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeAlloc);
	// adding from smallest to largest
	for (int i = 0; i < 5; i++) {
		int *x = malloc(sizeof(int));
		*x = i;
		SLInsert(sl, x);
		printSLInts(sl);
	}
	int *a = malloc(sizeof(int)); *a = 10;
	int *b = malloc(sizeof(int)); *b = 6;
	int *c = malloc(sizeof(int)); *c = -2;
	
	// add to head
	SLInsert(sl, a);
	printSLInts(sl);

	// add in middle
	SLInsert(sl, b);
	printSLInts(sl);

	// adding twice
	SLInsert(sl, c);
	printSLInts(sl);
	SLInsert(sl, c);
	printSLInts(sl);

	// double remove
	SLRemove(sl, c); // c is freed at this point
	printSLInts(sl);
	int n = -2;
	SLRemove(sl, &n);
	printSLInts(sl);
	
	// trying to remove something that was never there in the first place
	// in the above example, c will be freed if there were no more references to the node when it was removed
	//int *x = malloc(sizeof(int)); *x = 17;
	int x = 17;
	SLRemove(sl, &x);
	printSLInts(sl);

	// remove head
	SLRemove(sl, a);
	printSLInts(sl);
	SLDestroy(sl);

	printf("-------------------\n\n");
	return 0;
}

int test2() {
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeNoAlloc);
	int a = 10;
	// removing when list is empty
	SLRemove(sl, &a);
	printSLInts(sl);
	SLInsert(sl, &a);
	printSLInts(sl);
	SLRemove(sl, &a);
	printSLInts(sl);

	SLDestroy(sl);

	printf("-------------------\n\n");
	return 0;
}

int test3() {
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeAlloc);
	// adding from largest to smallest
	for (int i = 10; i >-3; i--) {
		int *x = malloc(sizeof(int));
		*x = i;
		SLInsert(sl, x);
		printSLInts(sl);
	}

	// remove from next to last and then last
	int *z = malloc(sizeof(int)); *z = -1;
	SLRemove(sl, z);
	printSLInts(sl);
	int *y = malloc(sizeof(int)); *y = -2;
	SLRemove(sl, y);
	printSLInts(sl);

	free(z); free(y);
	
	SLDestroy(sl);

	printf("-------------------\n\n");
	return 0;
}
int test4() {
	// place iterators and continue iterating
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeAlloc);
	for (int i = 10; i >-3; i--) {
		int *x = malloc(sizeof(int));
		*x = i;
		SLInsert(sl, x);
		printSLInts(sl);
	}

	// place iter1
	SortedListIteratorPtr iter1 = SLCreateIterator(sl);
	SLNextItem(iter1);
	SLNextItem(iter1);
	printf("iter1 %d\n", *(int*)SLGetItem(iter1));

	// place iter2 in front of iter1
	SortedListIteratorPtr iter2 = SLCreateIterator(sl);
	SLNextItem(iter2);
	SLNextItem(iter2);
	SLNextItem(iter2);
	printf("iter2 %d\n", *(int*)SLGetItem(iter2));

	// remove at iter1
	SLRemove(sl, SLGetItem(iter1));
	printSLInts(sl);
	// remove at iter2
	SLRemove(sl, SLGetItem(iter2));
	printSLInts(sl);

	// advance iter1 and it's the one that was just removed
	if (SLNextItem(iter1) == SLGetItem(iter2)) {
		printf("At hidden, removed but not destroyed node with data: %d == %d\n", *(int*)SLGetItem(iter1), *(int*)SLGetItem(iter2));
	}
	printSLInts(sl);

	// advance iter1 and iter 2 and they're still equal
	printf("iter1, iter2 still equal after advancement: %d == %d\n", *(int*)SLNextItem(iter1), *(int*)SLNextItem(iter2));

	SLDestroyIterator(iter1);
	SLDestroyIterator(iter2);

	SLDestroy(sl);
	printf("-------------------\n\n");
	return 0;
}
int test5() {
	// create and destroy
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeAlloc);
	
	for (int i = 50; i>0; i--) {
		int *x = malloc(sizeof(int)); *x = i;
		SLInsert(sl, x);
	}
	SortedListIteratorPtr iter = SLCreateIterator(sl);
	printSLInts(sl);
	// remove everything from the list, but the iterator is keeping the 50 there
	for (int i = 50; i>0; i--) {
		int *x = malloc(sizeof(int)); *x = i;
		SLRemove(sl, x);
		free(x);
	}
	printSLInts(sl);
	//Iterator is still at 50
	printf("Iterator is keeping removed nodes alive. current: %d, next: %d\n", *(int*)SLGetItem(iter), *(int*)SLNextItem(iter));
	// 50 is destroyed once the SLNextItem runs
	// everything gets destroyed after this
	SLDestroyIterator(iter);


	SLDestroy(sl);

	printf("-------------------\n\n");
	return 0;
}
int test() {
	// create and destroy
	SortedListPtr sl = SLCreate(compareInts, destroyBasicTypeNoAlloc);
	printSLInts(sl);
	SLDestroy(sl);

	printf("-------------------\n\n");
	return 0;
}


////// EXPECTED OUTPUT
$ ./sl 
NULL
-------------------

0 -> NULL
1 -> 0 -> NULL
2 -> 1 -> 0 -> NULL
3 -> 2 -> 1 -> 0 -> NULL
4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> -2 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> -2 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 6 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
6 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
-------------------

NULL
10 -> NULL
NULL
-------------------

10 -> NULL
10 -> 9 -> NULL
10 -> 9 -> 8 -> NULL
10 -> 9 -> 8 -> 7 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> -2 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -2 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
-------------------

10 -> NULL
10 -> 9 -> NULL
10 -> 9 -> 8 -> NULL
10 -> 9 -> 8 -> 7 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> NULL
10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> -2 -> NULL
iter1 8
iter2 7
10 -> 9 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> -2 -> NULL
10 -> 9 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> -2 -> NULL
At hidden, removed but not destroyed node with data: 7 == 7
10 -> 9 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> 0 -> -1 -> -2 -> NULL
iter1, iter2 still equal after advancement: 6 == 6
-------------------

50 -> 49 -> 48 -> 47 -> 46 -> 45 -> 44 -> 43 -> 42 -> 41 -> 40 -> 39 -> 38 -> 37 -> 36 -> 35 -> 34 -> 33 -> 32 -> 31 -> 30 -> 29 -> 28 -> 27 -> 26 -> 25 -> 24 -> 23 -> 22 -> 21 -> 20 -> 19 -> 18 -> 17 -> 16 -> 15 -> 14 -> 13 -> 12 -> 11 -> 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> NULL
NULL
Iterator is keeping removed nodes alive. current: 50, next: 49
-------------------
